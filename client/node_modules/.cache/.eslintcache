[{"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/index.js":"1","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/App.js":"2","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Contribute.js":"3","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/LogIn.js":"4","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Home.js":"5","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/LoginSignup.js":"6","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/NavBar.js":"7","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/SignUp.js":"8","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Profile.js":"9","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Contact.js":"10","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/DisplayPlayer.js":"11","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/ServerListNames.js":"12","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/ContributionStars.js":"13","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/SearchBar.js":"14","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Review.js":"15"},{"size":316,"mtime":1700097735584,"results":"16","hashOfConfig":"17"},{"size":1898,"mtime":1700097724084,"results":"18","hashOfConfig":"17"},{"size":11185,"mtime":1700097560065,"results":"19","hashOfConfig":"17"},{"size":2092,"mtime":1700097608295,"results":"20","hashOfConfig":"17"},{"size":1893,"mtime":1700097600349,"results":"21","hashOfConfig":"17"},{"size":952,"mtime":1700097615211,"results":"22","hashOfConfig":"17"},{"size":4127,"mtime":1700097620723,"results":"23","hashOfConfig":"17"},{"size":2865,"mtime":1700097714554,"results":"24","hashOfConfig":"17"},{"size":1751,"mtime":1700097632415,"results":"25","hashOfConfig":"17"},{"size":2317,"mtime":1700097549475,"results":"26","hashOfConfig":"17"},{"size":21607,"mtime":1700097588691,"results":"27","hashOfConfig":"17"},{"size":1600,"mtime":1700097682522,"results":"28","hashOfConfig":"17"},{"size":6462,"mtime":1700097572503,"results":"29","hashOfConfig":"17"},{"size":1646,"mtime":1700097655677,"results":"30","hashOfConfig":"17"},{"size":2738,"mtime":1700097639743,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b6n9rx",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/index.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/App.js",["82"],[],"// App.js\nimport React, { useState } from 'react';\nimport Home from './components/Home';\nimport NavBar from './components/NavBar';\nimport Contribute from './components/Contribute';\nimport Contact from './components/Contact';\nimport DisplayPlayer from './components/DisplayPlayer';\nimport LoginSignup from './components/LoginSignup';\nimport LogIn from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport Profile from './components/Profile';\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('home');\n  const [submissionSuccess, setSubmissionSuccess] = useState(false);\n  const [playerData, setPlayerData] = useState(null);\n\n  const handleContributeClick = () => {\n    setCurrentPage('contribute');\n    setSubmissionSuccess(false);\n  };\n  const handleSearchSuccess = (data) => {\n    setCurrentPage('displayPlayer');\n    setPlayerData(data);\n  };\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'home':\n        return <Home setCurrentPage={setCurrentPage} handleContributeClick={handleContributeClick} handleSearchSuccess={handleSearchSuccess} />;\n      case 'contribute':\n        return <Contribute handleContributeClick={handleContributeClick} handleSearchSuccess={handleSearchSuccess} />;\n      case 'contact':\n        return <Contact />;\n      case 'loginsignup':\n        return <LoginSignup setCurrentPage={setCurrentPage}/>;\n      case 'login':\n        return <LogIn setCurrentPage={setCurrentPage}/>;\n      case 'signup':\n        return <SignUp setCurrentPage={setCurrentPage}/>;\n      case 'profile':\n        return <Profile/>\n      case 'displayPlayer':\n        return <DisplayPlayer playerData={playerData} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div>\n      <NavBar setCurrentPage={setCurrentPage} handleSearchSuccess={handleSearchSuccess} />\n      {renderPage()}\n    </div>\n  );\n};\n\nexport default App;\n","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Contribute.js",["83"],[],"import React, { useState } from 'react';\nimport ServerListNames from './ServerListNames';\nimport ContributionStars from './ContributionStars';\nimport Cookies from 'universal-cookie';\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\n\nconst Contribute = ({ handleSearchSuccess}) => {\n\n    // Get the JWT token from the cookie\n    const cookies = new Cookies();\n    const token = cookies.get('jwt_authorization');\n\n    // all main input fields for rating\n    const [ original_username, setOriginal_username ] = useState(\"\");\n    const [ creep_score, setCreep_score ] = useState(\"\");\n    const [ map_awareness_score, setMap_awareness_score ] = useState(\"\");\n    const [ team_fighting_score, setTeam_fighting_score ] = useState(\"\");\n    const [ feeding_score, setFeeding_score ] = useState(\"\");\n    const [ toxicity_score, setToxicity_score ] = useState(\"\");\n    const [ tilt_score, setTilt_score ] = useState(\"\");\n    const [ kindness_score, setKindness_score ] = useState(\"\");\n    const [ laning_score, setLaning_score ] = useState(\"\");\n    const [ carry_score, setCarry_score ] = useState(\"\");\n    const [ shot_calling_score, setShot_calling_score ] = useState(\"\");\n    const [ review, setReview ] = useState(\"\");\n    const [ play_again, setPlay_again ] = useState('yes');\n\n    // server selector used for locating specified player\n    const [ selectedServer, setSelectedServer ] = useState(null);\n\n    // saves player data\n    const [playerData, setPlayerData] = useState({});\n\n      \n    const onSubmitForm = async e => {\n        e.preventDefault();\n\n        const allFieldsFilled = (\n            original_username &&\n            selectedServer &&\n            creep_score !== \"\" &&\n            map_awareness_score !== \"\" &&\n            team_fighting_score !== \"\" &&\n            feeding_score !== \"\" &&\n            toxicity_score !== \"\" &&\n            tilt_score !== \"\" &&\n            kindness_score !== \"\" &&\n            laning_score !== \"\" &&\n            carry_score !== \"\" &&\n            shot_calling_score !== \"\"\n        );\n    \n        if (!allFieldsFilled) {\n            alert(\"Please fill out all fields before contributing!\");\n            return;\n        }\n        try {\n            const body = { original_username, server_name: selectedServer,creep_score, map_awareness_score, team_fighting_score, feeding_score, toxicity_score, tilt_score, kindness_score, laning_score, carry_score, shot_calling_score, review,play_again: play_again === 'yes' ? 5 : play_again === 'no' ? 1 : null}\n            const post_response = await fetch(apiUrl + \"/rating\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n              },\n            body: JSON.stringify(body)\n        });\n            const url = apiUrl + `/search?original_username=${encodeURIComponent(original_username)}&server_name=${encodeURIComponent(selectedServer)}`;\n            const get_response = await fetch(url, {\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n        });\n        console.log(post_response);\n        if (post_response.ok) {\n            const data = await get_response.json();\n            setPlayerData({ original_username: data.original_username, server_name: selectedServer });\n            handleSearchSuccess({ original_username: data.original_username, server_name: selectedServer, playerData: data });\n        }else{\n            alert(\"Please log in before attempting to contribute a rating!\");\n        }\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n  \n    return (\n        <div className=\"text-center\">\n        <h1 className=\"text-center mb-3\">CONTRIBUTE RATING</h1>\n        <form onSubmit={onSubmitForm}>\n            <div className=\"mt-lg-5\">\n            <div className=\"row justify-content-center mb-3\">\n                <div className=\"col-md-6\">\n                <div className=\"form-group text-center\">\n                    <ServerListNames\n                    selectedServer={selectedServer}\n                    setSelectedServer={setSelectedServer}\n                    className=\"form-control text-center\"\n                   />\n                </div>\n                </div>\n            </div>\n            <div className=\"row justify-content-center mb-3\">\n                <div className=\"col-12 col-md-2\">\n                <div className=\"form-group text-center\">\n                    <label className='h4' htmlFor=\"playerName\">Player Name</label>\n                    <input\n                    type=\"text\"\n                    className=\"form-control text-center\"\n                    id=\"playerName\"\n                    placeholder=\"Enter a name\"\n                    value={original_username} onChange={e => setOriginal_username(e.target.value)}\n                    />\n                </div>\n                </div>\n            </div>\n                {/* this is one line */}\n                <div className=\"row justify-content-center mb-3\">\n                    <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Cs'ing</label>\n                            <ContributionStars value={creep_score} onChange={(value) => setCreep_score(value)} attributeType=\"csing\" />\n\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Map Awareness</label>\n                            <ContributionStars value={map_awareness_score} onChange={(value) => setMap_awareness_score(value)} attributeType=\"MapAwareness\"/>\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Team Fighting</label>\n                            <ContributionStars value={team_fighting_score} onChange={(value) => setTeam_fighting_score(value)} attributeType=\"TeamFighting\"/>\n                        </div>\n                        </div>\n                </div>\n                {/* this is one line */}\n                <div className=\"row justify-content-center mb-3\">\n                    <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Intentional Feeding</label>\n                            <ContributionStars value={feeding_score} onChange={(value) => setFeeding_score(value)} attributeType=\"IntentionalFeeding\"/>\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Toxicity</label>\n                            <ContributionStars value={toxicity_score} onChange={(value) => setToxicity_score(value)} attributeType=\"Toxicity\"/>\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Tiltability</label> \n                            <ContributionStars value={tilt_score} onChange={(value) => setTilt_score(value)} attributeType=\"Tiltability\"/>\n                        </div>\n                        </div>\n                </div>\n                {/* this is one line */}\n                <div className=\"row justify-content-center mb-3\">\n                    <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Kindness</label>\n                            <ContributionStars value={kindness_score} onChange={(value) => setKindness_score(value)} attributeType=\"Kindness\"/>\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Laning / Jungling</label>\n                            <ContributionStars value={laning_score} onChange={(value) => setLaning_score(value)} attributeType=\"Laning/Jungling\"/>\n                        </div>\n                        </div>\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Carry-ability</label>\n                            <ContributionStars value={carry_score} onChange={(value) => setCarry_score(value)} attributeType=\"CarryAbility\"/>\n                        </div>\n                        </div>\n                {/* this is one line */}\n                </div>\n                <div className=\"row justify-content-center mb-3\">\n                        <div className=\"col-12 col-md-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4\">Shot calling</label>\n                            <ContributionStars value={shot_calling_score} onChange={(value) => setShot_calling_score(value)} attributeType=\"ShotCalling\"/>\n                        </div>\n                        </div>\n                </div>\n                <div className=\"row justify-content-center mb-3\">\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"h4 text-nowrap\">Play again?</label>\n                            <select className=\"form-control text-center\" value={play_again} onChange={(e) => setPlay_again(e.target.value)}>\n                                <option value=\"select\" disabled>Select an option</option>\n                                <option value=\"yes\">Yes</option>\n                                <option value=\"no\">No</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mb-3\">\n                    <div className=\"col-4\">\n                        <div className=\"form-group\">\n                        <label className=\"text-center\">Write a review</label>\n                        <textarea className=\"form-control text-center\" rows=\"3\" placeholder=\"Enter your review\" value={review || ''}onChange={(e) => setReview(e.target.value)}></textarea>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-6 text-center\">\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-dark text-light btn-lg mt-2\"\n                    >\n                        Contribute rating\n                    </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n        </div>\n    );\n};\n\nexport default Contribute;\n","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/LogIn.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Home.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/LoginSignup.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/NavBar.js",["84","85","86","87","88","89"],[],"import React from 'react';\nimport SearchBar from './SearchBar';\nimport Cookies from 'js-cookie';\n\nconst NavBar = ({ currentPage, setCurrentPage, handleSearchSuccess }) => {\n  const isLoggedIn = Cookies.get('jwt_authorization') !== undefined;\n\n  const handleNavigation = (page) => {\n    console.log('Changing page to', page);\n    if (page === 'logout') {\n      try {\n        Cookies.remove('jwt_authorization');\n        alert(\"You've been logged out.\");\n        setCurrentPage('home');\n      } catch (err) {\n        console.error(err.message);\n      }\n    } else {\n      console.log('Changing page to', page);\n      setCurrentPage(page);\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"navbar navbar-dark justify-content-between mb-5 \">\n        <div className=\"container-fluid\">\n          <button\n            className=\"navbar-toggler collapsed\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"navbar-collapse collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <a\n                  href=\"#\"\n                  className={`nav-link px-2 text-light ${\n                    currentPage === 'home' ? 'link-secondary' : ''\n                  }`}\n                  onClick={() => handleNavigation('home')}\n                >\n                  Home\n                </a>\n              </li>\n              {!isLoggedIn && (\n                <li className=\"nav-item\">\n                  <a\n                    href=\"#\"\n                    className={`nav-link px-2 text-light ${\n                      currentPage === 'loginsignup' ? 'link-secondary' : ''\n                    }`}\n                    onClick={() => handleNavigation('loginsignup')}\n                  >\n                    Sign up / Log in \n                  </a>\n                </li>\n                \n              )}\n              <li className=\"nav-item\">\n                <a\n                  href=\"#\"\n                  className={`nav-link px-2 text-light ${\n                    currentPage === 'feedback' ? 'link-secondary' : ''\n                  }`}\n                  onClick={() => handleNavigation('contact')}\n                >\n                  Feedback\n                </a>\n              </li>\n              {isLoggedIn && (\n                <>\n                  <li className=\"nav-item\">\n                    <a\n                      href=\"#\"\n                      className={`nav-link px-2 text-light ${\n                        currentPage === 'contribute' ? 'link-secondary' : ''\n                      }`}\n                      onClick={() => handleNavigation('contribute')}\n                    >\n                      Contribute rating\n                    </a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a\n                      href=\"#\"\n                      className={`nav-link px-2 text-light ${\n                        currentPage === 'profile' ? 'link-secondary' : ''\n                      }`}\n                      onClick={() => handleNavigation('profile')}\n                    >\n                      Profile\n                    </a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a\n                      href=\"#\"\n                      className={`nav-link px-2 text-light ${\n                        currentPage === 'logout' ? 'link-secondary' : ''\n                      }`}\n                      onClick={() => handleNavigation('logout')}\n                    >\n                      LogOut\n                    </a>\n                  </li>\n                </>\n              )}\n            </ul>\n          </div>\n          <div className=\"ms-auto mb-auto\">\n            <SearchBar handleSearchSuccess={handleSearchSuccess} />\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/SignUp.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Profile.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Contact.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/DisplayPlayer.js",["90"],[],"import React, { useState, useEffect } from \"react\";\nimport \"../DisplayPlayer.css\"\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nconst DisplayPlayer = (props) => {\n\n    const generateSectionRating = (score, attributeType) => {\n        if(attributeType === 'csing') {\n            return generateCsingRating(score);\n        }else if(attributeType === 'MapAwareness'){\n            return generateMapAwarenessRating(score);\n        }else if(attributeType === 'TeamFighting'){\n            return generateTeamFightingRating(score);\n        }else if(attributeType === 'IntentionalFeeding'){\n            return generateIntentionalFeedingRating(score);\n        }else if(attributeType === 'Toxicity'){\n            return generateToxicityRating(score);\n        }else if(attributeType === 'Tiltability'){\n            return generateTiltabilityRating(score);\n        }else if(attributeType === 'Kindness'){\n            return generateKindnessRating(score);\n        }else if(attributeType === 'Laning/Jungling'){\n            return generateLaningJunglingRating(score);\n        }else if(attributeType === 'CarryAbility'){\n            return generateCarryAbilityRating(score);\n        }else if(attributeType === 'ShotCalling'){\n            return generateShotCallingRating(score);\n        }else if(attributeType === 'PlayAgain'){\n            return generatePlayAgainRating(score);\n        }else{\n                return { stars: '0', text: 'No Rating Yet' }; ;\n        }\n    };\n    const generateCsingRating = (score) => {\n                    if (score>=1 && score< 2){\n                return { stars: '★☆☆☆☆', text: 'Awful at cs\\'ing' };\n                    }else if (score>=2 && score< 3){\n                return { stars: '★★☆☆☆', text: 'Bad at cs\\'ing' };\n                    }else if (score>=3 && score< 4){\n                return { stars: '★★★☆☆', text: 'Okay at cs\\'ing' };\n                    }else if (score>=4 && score< 5){\n                return { stars: '★★★★☆', text: 'Great at cs\\'ing' };\n                    }else if ( score === 5){\n                return { stars: '★★★★★', text: 'Excellent at cs\\'ing' };\n           }else{\n                return { stars: '', text: ' ' };\n        }\n    };\n    const generateMapAwarenessRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Awful at map awareness' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Bad at map awareness' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Okay at map awareness' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Great at map awareness' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Excellent at map awareness' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateTeamFightingRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Awful at team fighting' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Bad at team fighting' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Okay at team fighting' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Great at team fighting' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Excellent at team fighting' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateIntentionalFeedingRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Dirty inter' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Kind of inted' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Had a bad game' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Had a few bad deaths' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Didn\\'t int at all' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateToxicityRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Extremely toxic' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Slightly toxic' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Moderately toxic' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Not really toxic' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Not at all toxic' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateTiltabilityRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Extremely tiltable' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Slightly tiltable' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Moderately tiltable' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Rarely tilts' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Tiltproof!' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateKindnessRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Extremely rude' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Slightly rude' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Neutral' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Slightly Kind' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Very kind' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateLaningJunglingRating = (score) => {\n        if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Awful at Laning/Jungling' };\n        }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Bad at Laning/Jungling' };\n        }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Okay at Laning/Jungling' };\n        }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Great at Laning/Jungling' };\n        }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Excellent at Laning/Jungling' };\n        }else{\n            return { stars: ' ', text: ' ' };\n        }\n    };\n    const generateCarryAbilityRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Awful at carrying' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Bad at carrying' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Okay at carrying' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Great at carrying' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Excellent at carrying' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generateShotCallingRating = (score) => {\n                if (score>=1 && score< 2){\n            return { stars: '★☆☆☆☆', text: 'Awful at shot calling' };\n                }else if (score>=2 && score< 3){\n            return { stars: '★★☆☆☆', text: 'Bad at shot calling' };\n                }else if (score>=3 && score< 4){\n            return { stars: '★★★☆☆', text: 'Okay at shot calling' };\n                }else if (score>=4 && score< 5){\n            return { stars: '★★★★☆', text: 'Great at shot calling' };\n                }else if ( score === 5){\n            return { stars: '★★★★★', text: 'Excellent at shot calling' };\n        }else{\n            return { stars: ' ', text: ' ' };\n    }\n    };\n    const generatePlayAgainRating = (score) => {\n        if (score>=1 && score< 2){\n    return { stars: '★☆☆☆☆', text: 'On my block list!' };\n        }else if (score>=2 && score< 3){\n    return { stars: '★★☆☆☆', text: 'Wouldn\\'t willingly play with them again' };\n        }else if (score>=3 && score< 4){\n    return { stars: '★★★☆☆', text: 'Would\\'t care if I got them in a game' };\n        }else if (score>=4 && score< 5){\n    return { stars: '★★★★☆', text: 'Would like to play with them again' };\n        }else if ( score === 5){\n    return { stars: '★★★★★', text: 'Please accept my friend request!' };\n    }else{\n    return { stars: ' ', text: ' ' };\n    }\n};\n\n    const { original_username, server_name } = props.playerData;\n\n    const [updatedData, setUpdatedData] = useState(null);\n    const updateAndFetchData = async () => {\n        try {\n            // Perform the update (POST request)\n            const updateResponse = await fetch(apiUrl + '/api/update-averages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    original_username: original_username,\n                    server_name: server_name,\n                }),\n            });\n\n            // Check if the update was successful (status code 200)\n            if (!updateResponse.ok) {\n                throw new Error('Update failed');\n            }\n\n            // Fetch the updated data (GET request)\n            const fetchDataResponse = await fetch(apiUrl + `/api/collect-averages?original_username=${original_username}&server_name=${server_name}`);\n\n            // Check if fetching the data was successful\n            if (!fetchDataResponse.ok) {\n                throw new Error('Failed to fetch updated data');\n            }\n\n            // Extract the data and update the UI\n            const updatedData = await fetchDataResponse.json();\n            console.log(updatedData);\n\n            setUpdatedData(updatedData);\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    };\n\n    useEffect(() => {\n        updateAndFetchData();\n    }, []); \n\n    const formatElapsedTime = (timestamp) => {\n        if (!timestamp) {\n            return 'Loading...';\n        }\n    \n        const parsedTimestamp = new Date(timestamp.replace(' ', 'T'));\n        const elapsedMilliseconds = Date.now() - parsedTimestamp.getTime();\n        const elapsedSeconds = Math.floor(elapsedMilliseconds / 1000000);\n        const minutes = Math.floor(elapsedSeconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n    \n        if (minutes < 1) {\n            return 'Just now';\n        } else if (minutes < 60) {\n            return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\n        } else if (hours < 24) {\n            return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n        } else {\n            return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n        }\n    };   \n    \n  // Render JSX\n    return (\n        <>\n            <div className=\"text-center\">\n                <h1 className=\"mb-3\">{original_username}</h1>\n                <h5 className=\"mb-3\">{server_name}</h5>\n                <div>\n                    <h6>Number of ratings for this player: <span> {updatedData ? `${updatedData.total_number_of_ratings.count}` : 'Loading...'}</span></h6>\n                    <p className=\"mt-3\">Last updated: <span>{updatedData ? formatElapsedTime(updatedData.updated_player_averages.last_click_timestamp) : 'Loading...'}</span></p>\n                    <div className=\"text-center\">\n                        <label className=\"mb-2\">Overall rating: <span>{updatedData ? `${updatedData.updated_player_averages.overall_avg} / 5` : 'Loading...'}</span></label>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mb-3 mt-5\">\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Cs'ing</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.creep_score_avg) : 0, 'csing').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.creep_score_avg) : 0, 'csing').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.creep_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Map Awareness</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.map_awareness_score_avg) : 0, 'MapAwareness').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.map_awareness_score_avg) : 0, 'MapAwareness').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.map_awareness_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Team Fighting</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.team_fighting_score_avg) : 0, 'TeamFighting').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.team_fighting_score_avg) : 0, 'TeamFighting').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.team_fighting_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mb-3 mt-5\">\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Intentional Feeding</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.feeding_score_avg) : 0, 'IntentionalFeeding').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.feeding_score_avg) : 0, 'IntentionalFeeding').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.feeding_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Toxicity</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.toxicity_score_avg) : 0, 'Toxicity').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.toxicity_score_avg) : 0, 'Toxicity').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.toxicity_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Tiltability</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.tilt_score_avg) : 0, 'Tiltability').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.tilt_score_avg) : 0, 'Tiltability').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.tilt_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mb-3 mt-5\">\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Kindness</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.kindness_score_avg) : 0, 'Kindness').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.kindness_score_avg) : 0, 'Kindness').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.kindness_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Laning / Jungling</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.laning_score_avg) : 0, 'Laning/Jungling').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.laning_score_avg) : 0, 'Laning/Jungling').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.laning_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Carry-ability</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.carry_score_avg) : 0, 'CarryAbility').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.carry_score_avg) : 0, 'CarryAbility').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.carry_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mb-3 mt-5\">\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Shot calling</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.shot_calling_score_avg) : 0, 'ShotCalling').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.shot_calling_score_avg) : 0, 'ShotCalling').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.shot_calling_score_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                    <div className=\"col-2\">\n                        <div className=\"form-group text-center\">\n                            <label className=\"mb-2 h5\">Play again?</label>\n                            <p><small className=\"text-muted\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.play_again_avg) : 0, 'PlayAgain').text}</small></p>\n                            <p className=\"h4\">{generateSectionRating(updatedData ? parseFloat(updatedData.updated_player_averages.play_again_avg) : 0, 'PlayAgain').stars}</p>\n                            <p>{updatedData ? `${updatedData.updated_player_averages.play_again_avg} / 5` : 'Loading...'}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default DisplayPlayer;","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/ServerListNames.js",["91"],[],"// ServerListNames.js\nimport React, { useState, useEffect } from \"react\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nconst ServerListNames = ({ selectedServer, setSelectedServer }) => {\n  const [serverList, setServerList] = useState([]);\n\n  useEffect(() => {\n    const fetchDataOnLoad = async () => {\n      try {\n        const response = await fetch(apiUrl + \"/servers\", {\n          method: \"GET\",\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setServerList(data);\n        }\n      } catch (error) {\n        console.error('Error:', error.message);\n      }\n    };\n\n    fetchDataOnLoad();\n  }, []);\n\n  const handleServerClick = (server) => {\n    setSelectedServer(server);\n  };\n\n  return (\n    <div className=\"btn-group\">\n      <button\n        className=\"btn btn-light text-dark dropdown-toggle me-1 border border-dark\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n        style={{ minWidth: \"100px\", maxWidth: \"100px\", overflow: \"hidden\", textOverflow: \"ellipsis\" }}\n      >\n        {selectedServer || \"Server\"}\n      </button>\n      <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        {serverList.map((server) => (\n          <li key={server}>\n            <a\n              className=\"dropdown-item\"\n              href=\"#\"\n              onClick={() => handleServerClick(server)}\n            >\n              {server}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ServerListNames;\n","/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/ContributionStars.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/SearchBar.js",[],[],"/Users/anthonytabet/Desktop/Projects/FirstNodeReactProject/client/src/components/Review.js",[],[],{"ruleId":"92","severity":1,"message":"93","line":15,"column":10,"nodeType":"94","messageId":"95","endLine":15,"endColumn":27},{"ruleId":"92","severity":1,"message":"96","line":34,"column":12,"nodeType":"94","messageId":"95","endLine":34,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":42,"column":17,"nodeType":"99","endLine":48,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":54,"column":19,"nodeType":"99","endLine":60,"endColumn":20},{"ruleId":"97","severity":1,"message":"98","line":67,"column":17,"nodeType":"99","endLine":73,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":80,"column":21,"nodeType":"99","endLine":86,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":91,"column":21,"nodeType":"99","endLine":97,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":102,"column":21,"nodeType":"99","endLine":108,"endColumn":22},{"ruleId":"100","severity":1,"message":"101","line":243,"column":8,"nodeType":"102","endLine":243,"endColumn":10,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"98","line":46,"column":13,"nodeType":"99","endLine":50,"endColumn":14},"no-unused-vars","'submissionSuccess' is assigned a value but never used.","Identifier","unusedVar","'playerData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateAndFetchData'. Either include it or remove the dependency array.","ArrayExpression",["104"],{"desc":"105","fix":"106"},"Update the dependencies array to be: [updateAndFetchData]",{"range":"107","text":"108"},[10582,10584],"[updateAndFetchData]"]